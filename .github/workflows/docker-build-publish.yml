name: Release Docker Image and GitHub Release on Tag

on:
  push:
    tags:
      - 'v*'  # Se ejecuta al hacer push de un tag como v1.2.3, v2.0.0-beta, etc.

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Necesario para crear el release en GitHub

    steps:
      # Paso 1: Clonar el repositorio con historial completo
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Paso 2: Validar que el tag pertenece a un commit de la rama 'main'
      - name: Validate tag is on main
        run: |
          TAG_COMMIT=$(git rev-parse HEAD)
          echo "Tag commit: $TAG_COMMIT"

          git fetch origin main
          MAIN_COMMITS=$(git rev-list origin/main)

          if ! echo "$MAIN_COMMITS" | grep -q "$TAG_COMMIT"; then
            echo "‚ùå El tag no est√° basado en un commit de la rama 'main'."
            exit 1
          fi

          echo "‚úÖ El tag pertenece a un commit de 'main'."

      # Paso 3: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Paso 4: Iniciar sesi√≥n en Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Paso 5: Extraer versi√≥n desde el nombre del tag
      - name: Extract version from tag
        id: get_version
        run: |
          version="${GITHUB_REF#refs/tags/}"
          echo "Versi√≥n detectada: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      # Paso 6: Validar que el nombre del tag cumpla con el formato SemVer (incluyendo pre-releases)
      - name: Validate tag format (SemVer)
        run: |
          version="${{ steps.get_version.outputs.version }}"
          echo "Validating tag format: $version"

          semver_regex="^v([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?$"

          if [[ ! "$version" =~ $semver_regex ]]; then
            echo "‚ùå El tag '$version' no cumple con el formato Semantic Versioning esperado."
            echo "Formato v√°lido: vMAJOR.MINOR.PATCH[-PRERELEASE][+BUILD]"
            exit 1
          fi

          echo "‚úÖ Formato de tag v√°lido."

      # Paso 7: Construir y subir imagen Docker con la versi√≥n y con 'latest'
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/smart-finance-app:${{ steps.get_version.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/smart-finance-app:latest

      # Paso 8: Crear un release en GitHub
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            üöÄ Publicaci√≥n autom√°tica para la versi√≥n `${{ steps.get_version.outputs.version }}`
            Imagen Docker disponible en:
            - `docker.io/${{ secrets.DOCKER_USERNAME }}/smart-finance-app:${{ steps.get_version.outputs.version }}`
            - `docker.io/${{ secrets.DOCKER_USERNAME }}/smart-finance-app:latest`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
