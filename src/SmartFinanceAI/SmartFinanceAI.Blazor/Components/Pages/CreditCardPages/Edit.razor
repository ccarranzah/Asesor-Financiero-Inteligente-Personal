@page "/creditcards/edit"
@using Microsoft.EntityFrameworkCore
@using SmartFinanceAI.Blazor.Models
@inject IDbContextFactory<SmartFinanceAI.Blazor.Data.SmartFinanceAIAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>CreditCard</h2>
<hr />
@if (CreditCard is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="CreditCard" OnValidSubmit="UpdateCreditCard" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="CreditCard.Id" value="@CreditCard.Id" />
                <div class="mb-3">
                    <label for="cardnumber" class="form-label">CardNumber:</label>
                    <InputText id="cardnumber" @bind-Value="CreditCard.CardNumber" class="form-control" />
                    <ValidationMessage For="() => CreditCard.CardNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="creditlimit" class="form-label">CreditLimit:</label>
                    <InputNumber id="creditlimit" @bind-Value="CreditCard.CreditLimit" class="form-control" />
                    <ValidationMessage For="() => CreditCard.CreditLimit" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="currentbalance" class="form-label">CurrentBalance:</label>
                    <InputNumber id="currentbalance" @bind-Value="CreditCard.CurrentBalance" class="form-control" />
                    <ValidationMessage For="() => CreditCard.CurrentBalance" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="interestrate" class="form-label">InterestRate:</label>
                    <InputNumber id="interestrate" @bind-Value="CreditCard.InterestRate" class="form-control" />
                    <ValidationMessage For="() => CreditCard.InterestRate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="minimumpayment" class="form-label">MinimumPayment:</label>
                    <InputNumber id="minimumpayment" @bind-Value="CreditCard.MinimumPayment" class="form-control" />
                    <ValidationMessage For="() => CreditCard.MinimumPayment" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="nextduedate" class="form-label">NextDueDate:</label>
                    <InputDate id="nextduedate" @bind-Value="CreditCard.NextDueDate" class="form-control" />
                    <ValidationMessage For="() => CreditCard.NextDueDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/creditcards">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private CreditCard? CreditCard { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        CreditCard ??= await context.CreditCard.FirstOrDefaultAsync(m => m.Id == Id);

        if (CreditCard is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCreditCard()
    {
        if (CreditCard is not null)
        {
            CreditCard.UserId = 1; // TODO: Replace with actual user ID from authentication context
        }
        using var context = DbFactory.CreateDbContext();
        context.Attach(CreditCard!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CreditCardExists(CreditCard!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/creditcards");
    }

    private bool CreditCardExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.CreditCard.Any(e => e.Id == id);
    }
}
