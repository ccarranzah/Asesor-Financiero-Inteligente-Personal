@page "/creditcards/delete"
@using Microsoft.EntityFrameworkCore
@using SmartFinanceAI.Blazor.Models
@inject IDbContextFactory<SmartFinanceAI.Blazor.Data.SmartFinanceAIAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>CreditCard</h2>
    <hr />
    @if (creditcard is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CardNumber</dt>
            <dd class="col-sm-10">@creditcard.CardNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreditLimit</dt>
            <dd class="col-sm-10">@creditcard.CreditLimit</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CurrentBalance</dt>
            <dd class="col-sm-10">@creditcard.CurrentBalance</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">InterestRate</dt>
            <dd class="col-sm-10">@creditcard.InterestRate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MinimumPayment</dt>
            <dd class="col-sm-10">@creditcard.MinimumPayment</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">NextDueDate</dt>
            <dd class="col-sm-10">@creditcard.NextDueDate</dd>
        </dl>
        <EditForm method="post" Model="creditcard" OnValidSubmit="DeleteCreditCard" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(creditcard is null)">Delete</button> |
            <a href="/creditcards">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private CreditCard? creditcard;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        creditcard = await context.CreditCard.FirstOrDefaultAsync(m => m.Id == Id);

        if (creditcard is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCreditCard()
    {
        using var context = DbFactory.CreateDbContext();
        context.CreditCard.Remove(creditcard!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/creditcards");
    }
}
