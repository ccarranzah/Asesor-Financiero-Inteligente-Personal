@page "/accounts/edit"
@using Microsoft.EntityFrameworkCore
@using SmartFinanceAI.Blazor.Models
@inject IDbContextFactory<SmartFinanceAI.Blazor.Data.SmartFinanceAIAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Account</h2>
<hr />
@if (Account is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Account" OnValidSubmit="UpdateAccount" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Account.Id" value="@Account.Id" />
                <div class="mb-3">
                    <label for="accounttype" class="form-label">Account Type:</label>
                    <InputSelect id="accounttype" @bind-Value="Account.AccountType" class="form-control">
                        @foreach (var accountType in Enum.GetValues<AccountType>())
                        {
                            <option value="@accountType">@accountType</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Account.AccountType" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="accountalias" class="form-label">Account Alias:</label>
                    <InputText id="accountalias" @bind-Value="Account.AccountAlias" class="form-control" />
                    <ValidationMessage For="() => Account.AccountAlias" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="accountnumber" class="form-label">Account Number:</label>
                    <InputText id="accountnumber" @bind-Value="Account.AccountNumber" class="form-control" />
                    <ValidationMessage For="() => Account.AccountNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="balance" class="form-label">Balance:</label>
                    <InputNumber id="balance" @bind-Value="Account.Balance" class="form-control" />
                    <ValidationMessage For="() => Account.Balance" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/accounts">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Account? Account { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Account ??= await context.Account.FirstOrDefaultAsync(m => m.Id == Id);

        if (Account is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAccount()
    {
        if (Account is not null)
        {
            Account.UserId = 1; // TODO: Replace with actual user ID from authentication context
        }
        using var context = DbFactory.CreateDbContext();
        context.Attach(Account!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AccountExists(Account!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/accounts");
    }

    private bool AccountExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Account.Any(e => e.Id == id);
    }
}
