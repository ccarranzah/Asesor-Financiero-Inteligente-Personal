@page "/transactions/details"
@using Microsoft.EntityFrameworkCore
@using SmartFinanceAI.Blazor.Models
@inject IDbContextFactory<SmartFinanceAI.Blazor.Data.SmartFinanceAIAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Transaction</h2>
    <hr />
    @if (transaction is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Account Alias</dt>
            <dd class="col-sm-10">@transaction.Account?.AccountAlias</dd>
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@transaction.Date</dd>
            <dt class="col-sm-2">TransactionType</dt>
            <dd class="col-sm-10">@transaction.TransactionType</dd>
            <dt class="col-sm-2">TransactionCategoryType</dt>
            <dd class="col-sm-10">@transaction.TransactionCategoryType</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@transaction.Description</dd>
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@transaction.Amount</dd>
        </dl>
        <div>
            <a href="@($"/transactions/edit?id={transaction.Id}")">Edit</a> |
            <a href="@($"/transactions")">Back to List</a>
        </div>
    }
</div>

@code {
    private Transaction? transaction;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        transaction = await context.Transaction
            .Include(t => t.Account)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (transaction is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
